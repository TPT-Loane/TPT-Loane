# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

<<<<<<< HEAD
type TestModel {
  name: String!
}

<<<<<<< HEAD
type Category {
  """Example field (placeholder)"""
  id: Int!

  """Name of the Category"""
  name: String!

  """Can this category be used in a bundle (as an item)"""
  bundelable: Boolean!

  """Subcategories"""
  subCategories: [Category!]!

  """Parent categories"""
  parentCategory: [Category!]
}

type Query {
  item(id: String!): TestModel!
  items: [TestModel!]!
  categories: [Category!]!
=======
=======
>>>>>>> Add schema
type Note {
  id: Int!
  content: String!
  createdAt: DateTime!
  itemId: Int!
  item: Item!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Item {
  id: Int!
  regCode: String!
  createdAt: DateTime!
  note: [Note!]
}

type Query {
  note(id: Float!): Note!
  notes: [Note!]!
<<<<<<< HEAD
>>>>>>> Make notes operations functional
}

type Mutation {
  createItem(name: String!): TestModel!
<<<<<<< HEAD
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!, id: Int!): Category!
  removeCategory(id: Int!): Category!
}

input CreateCategoryInput {
  """Name of the category"""
  name: String!

  """Can this category be used in a bundle?"""
  bundelable: Boolean!

  """Id of the parent category"""
  parentCategoryId: Float
}

input UpdateCategoryInput {
  """Name of the category"""
  name: String

  """Can this category be used in a bundle?"""
  bundelable: Boolean
=======
=======
  items: [Item!]!
  item(id: Int!): Item!
}

type Mutation {
>>>>>>> Add schema
  createNote(createNoteInput: CreateNoteInput!): Note!
  removeNote(id: Int!): Note!
  createItem(createItemInput: CreateItemInput!): Item!
  updateItem(updateItemInput: UpdateItemInput!): Item!
  removeItem(id: Int!): Item!
}

input CreateNoteInput {
  """Content of the note"""
  content: String!
<<<<<<< HEAD
>>>>>>> Make notes operations functional
=======

  """Id of the item for relation"""
  itemId: Int!
}

input CreateItemInput {
  regCode: String!
}

input UpdateItemInput {
  regCode: String!
>>>>>>> Add schema
}
